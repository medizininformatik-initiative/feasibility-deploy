pid /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {

    proxy_read_timeout 7d;
    proxy_set_header X-Real-IP $remote_addr;

    include    /etc/nginx/mime.types;
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    map $http_authorization $fhir_upstream {
        default http://fhir-server-frontend:3000;

        "~Bearer" http://fhir-server:8080;
    }

    # Check if a X-Forwarded-Proto header (set by reverse-proxy) is already present. If not take the scheme used to call our nginx server.
    map $http_x_forwarded_proto $x_forwarded_proto {
        default $http_x_forwarded_proto;
        ""      $scheme; # Note that if the reverse-proxy does not add a X-Forwarded-Proto header, it may be incorrect if the protocol used by the reverse proxy is not the same as the one on which your nginx server is listening. In this case you have no solution than harcode the correct value.
    }

    # Check if a X-Forwarded-Host header (set by reverse-proxy) is already present. If not take the value of the 'Host' header.
    map $http_x_forwarded_host $x_forwarded_host {
        default $http_x_forwarded_host;
        ""      $http_host;
    }

    # Set the default port of each scheme/protocol (80 for http, 443 for https)
    map $x_forwarded_proto $default_http_port {
        default 80;
        "https" 443;
    }

    # Extract the real port of the client request url (unfortunatly nginx has no variable to get this info)
    map $http_host $request_port {
        default                 $default_http_port; # If port not explicitely defined in url take the default one associated to the calling scheme/protocol (80 for http, 443 for https)
        "~^[^\:]+:(?<p>\d+)$"   $p;
    }

    # Check if a X-Forwarded-Port header (set by reverse-proxy) is already present. If not take the port from the client request url
    map $http_x_forwarded_port $x_forwarded_port {
        default $http_x_forwarded_port;
        ""      $request_port;
    }

    server {
        listen 8443 ssl;
        http2  on;

        # DNS resolver needed for Docker
        resolver 127.0.0.11 valid=10s;

        # SSL-Certificate and private key
        ssl_certificate /etc/nginx/certs/cert.pem;
        ssl_certificate_key /etc/nginx/certs/key.pem;

        # The supported SSL Protocols
        ssl_protocols   TLSv1.2 TLSv1.3;

        # NGINX can impose its TLS cipher suite choices over those of a connecting browser, provided the browser supports them.
        ssl_prefer_server_ciphers      on;

        # The supported SSL Ciphers
        ssl_ciphers                    'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:RC4-SHA';

        ssl_session_cache  builtin:1000  shared:SSL:10m;

        # OCSP Stapling
        # When enabled, NGINX will make OCSP requests on behalf of connecting browsers. The response received from the OCSP server is added to NGINX’s browser response, which eliminates the need for browsers to verify a certificate’s revocation status by connecting directly to an OCSP server.
        ssl_stapling                  on;
        ssl_stapling_verify           on;

        # Header Options
        add_header                    Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header                    X-Content-Type-Options nosniff;
        add_header                    X-Frame-Options SAMEORIGIN;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        proxy_set_header     X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header     X-Forwarded-Proto $x_forwarded_proto;
        proxy_set_header     X-Forwarded-Host  $x_forwarded_host;
        proxy_set_header     X-Forwarded-Port  $x_forwarded_port;

        location /fhir {
            proxy_pass              $fhir_upstream;
            proxy_buffer_size       8k;
            proxy_request_buffering off;
            client_max_body_size    100M;
        }

        location /auth {
            set              $auth_upstream http://fhir-server-frontend-keycloak:8080;
            proxy_pass       $auth_upstream;
        }

        location /torch {
            auth_basic           "Restricted";
            auth_basic_user_file /etc/nginx/.htpasswd;
            set                  $torch_upstream http://torch:8080;
            proxy_pass           $torch_upstream;
            proxy_set_header     Authorization "";
        }

        location /torch/fileserver {
            auth_basic           "Restricted";
            auth_basic_user_file /etc/nginx/.htpasswd;
            set                  $torch_nginx_upstream http://torch-nginx:8080;
            proxy_pass           $torch_nginx_upstream;
            proxy_set_header     Authorization "";
        }

        location / {
            auth_basic           "Restricted";
            auth_basic_user_file /etc/nginx/.htpasswd;
            set                  $flare_upstream http://flare:8080;
            proxy_pass           $flare_upstream;
            proxy_set_header     Authorization "";
        }

        
    }
}
