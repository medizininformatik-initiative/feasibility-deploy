pid /tmp/nginx.pid;

events {
    worker_connections  1024;
}

http {

    # Check if a X-Forwarded-Proto header (set by reverse-proxy) is already present. If not take the scheme used to call our nginx server.
    map $http_x_forwarded_proto $x_forwarded_proto {
        default $http_x_forwarded_proto;
        ""      $scheme; # Note that if the reverse-proxy does not add a X-Forwarded-Proto header, it may be incorrect if the protocol used by the reverse proxy is not the same as the one on which your nginx server is listening. In this case you have no solution than harcode the correct value.
    }

    # Check if a X-Forwarded-Host header (set by reverse-proxy) is already present. If not take the value of the 'Host' header.
    map $http_x_forwarded_host $x_forwarded_host {
        default $http_x_forwarded_host;
        ""      $http_host;
    }

    # Set the default port of each scheme/protocol (80 for http, 443 for https)
    map $x_forwarded_proto $default_http_port {
        default 80;
        "https" 443;
    }

    # Extract the real port of the client request url (unfortunatly nginx has no variable to get this info)
    map $http_host $request_port {
        default                 $default_http_port; # If port not explicitely defined in url take the default one associated to the calling scheme/protocol (80 for http, 443 for https)
        "~^[^\:]+:(?<p>\d+)$"   $p;
    }

    # Check if a X-Forwarded-Port header (set by reverse-proxy) is already present. If not take the port from the client request url
    map $http_x_forwarded_port $x_forwarded_port {
        default $http_x_forwarded_port;
        ""      $request_port;
    }

    proxy_read_timeout 7d;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $x_forwarded_proto;
    proxy_set_header X-Forwarded-Host  $x_forwarded_host;
    proxy_set_header X-Forwarded-Port  $x_forwarded_port;

    include    /etc/nginx/mime.types;
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json application/fhir+json;
    gzip_disable "MSIE [1-6]\.";

    # SSL-Certificate and private key
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;

    # The supported SSL Protocols
    ssl_protocols   TLSv1.2 TLSv1.3;

    # DNS resolver needed for Docker
    resolver 127.0.0.11 valid=10s;

    # NGINX can impose its TLS cipher suite choices over those of a connecting browser, provided the browser supports them.
    ssl_prefer_server_ciphers      on;

    # The supported SSL Ciphers
    ssl_ciphers                    'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:RC4-SHA';

    ssl_session_cache  builtin:1000  shared:SSL:10m;

    # Header Options
    add_header                    Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header                    X-Content-Type-Options nosniff;
    add_header                    X-Frame-Options SAMEORIGIN;

    include /etc/nginx/conf.d/*.conf;
}
